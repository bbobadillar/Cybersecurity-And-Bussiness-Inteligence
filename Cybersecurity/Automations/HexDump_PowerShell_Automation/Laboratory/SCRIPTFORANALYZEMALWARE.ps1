# ?? Ajustar ruta automáticamente para consola o ejecución directa
 $scriptRoot = if ($PSScriptRoot) { $PSScriptRoot } else { (Get-Location).Path }
 $hexDumpPath = Join-Path $scriptRoot "imagen_hex_dump.txt"
 $exportPath = Join-Path $scriptRoot "Findings_MalwareAnalysis.txt"

 # ?? Verifica que el archivo hex exista
 if (!(Test-Path $hexDumpPath)) {
     Write-Host "? Archivo no encontrado: $hexDumpPath" -ForegroundColor Red
     exit
 }

 # ?? Palabras clave de análisis basado en el batch file simulado
 $maliciousKeywords = @(
     'echo',
     'mkdir',
     'copy',
     'start',
     '%APPDATA%',
     'calc.exe',
     'bad.exe',
     'System32'
 )

 # ?? Leer contenido del volcado hex
 $lines = Get-Content $hexDumpPath
 $results = @()

 foreach ($i in 0..($lines.Count - 1)) {
     $line = $lines[$i]
     foreach ($keyword in $maliciousKeywords) {
         if ($line -match $keyword) {
             $offset = $line.Substring(0, 8)
             $results += [PSCustomObject]@{
                 Offset     = "0x$offset"
                 Keyword    = $keyword
                 LinePreview = $line.Trim()
                 LineNumber = $i
             }
         }
     }
 }

 # ?? Iniciar archivo de salida
 "?? Análisis de imagen embebida - Hex Dump" | Out-File -FilePath $exportPath -Encoding UTF8
 "Fecha de análisis: $(Get-Date)" | Out-File -Append $exportPath
 "`n==============================================" | Out-File -Append $exportPath

 if ($results.Count -gt 0) {
     "`n?? Coincidencias encontradas:`n" | Out-File -Append $exportPath
     $results | ForEach-Object {
         $line = $_
         "Offset: $($line.Offset) | Palabra clave: $($line.Keyword)" | Out-File -Append $exportPath
         "Contenido Hex/ASCII: $($line.LinePreview)" | Out-File -Append $exportPath
         "-----------------------------------------" | Out-File -Append $exportPath
     }

     # ?? Determinar bloque sospechoso
     $startLine = ($results | Measure-Object -Property LineNumber -Minimum).Minimum
     $endLine   = ($results | Measure-Object -Property LineNumber -Maximum).Maximum

     $contextBefore = 5
     $contextAfter = 5
     $startLine = [Math]::Max(0, $startLine - $contextBefore)
     $endLine = [Math]::Min($lines.Count - 1, $endLine + $contextAfter)

     "`n?? Bloque sospechoso completo (líneas $startLine a $endLine):`n" | Out-File -Append $exportPath
     for ($j = $startLine; $j -le $endLine; $j++) {
         $lines[$j] | Out-File -Append $exportPath
     }

     Write-Host "`n? Exportación finalizada en:`n$exportPath" -ForegroundColor Green
 }
 else {
     "? Análisis limpio. No se encontraron coincidencias sospechosas." | Out-File -Append $exportPath
     Write-Host "`n? Análisis limpio. No se encontraron coincidencias sospechosas." -ForegroundColor Green
 }




